[project]
name = "learning-roadmap"
version = "0.1.0"


[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function call in argument defaults (FastAPI uses this pattern)
    "A003",    # shadowing python builtins (common in FastAPI path operations)
    "ARG001",  # unused function argument (FastAPI dependency injection may cause this)
    "RUF012",  # annotated with classvar (conflicts with Pydantic models)
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "LOG015",   # root-logger-calls
    "G004",     # logging-f-string
    "TRY300",   # try-else-block
    "TRY301",   # abstract-raise
    "TRY401",   # redundant-exception-object
    "BLE001",   # blind-except
    "INP001",   # implicit-namespace-package
    "PLR0913",  # too-many-arguments
    "PLC0206",  # dict-index-missing-items
    "S608",     # sql-injection-warning
    "COM812",    # conflicts with Ruffâ€™s formatter
    "PLR2004",  # magic-value-comparison (many are contextually appropriate)
    "TD002",    # missing-todo-author (common pattern in this codebase)
    "TD003",    # missing-todo-link (common pattern in this codebase)
    "FIX002",   # line-contains-todo (allow TODOs in code)
    "ANN401",   # **kwargs typing (common pattern in Pydantic overrides)
    "FBT001",   # boolean-typed-positional-argument (often acceptable for internal APIs)
    "FBT002",   # boolean-default-positional-argument (often acceptable for internal APIs)
    "N815",     # variable should be lowercase (mixedCase in Pydantic models with aliases)
]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"migrations/*" = ["E501", "I001"]
"tests/*" = ["D100", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80


[tool.mypy]
# Essential settings only
python_version = "3.11"
ignore_missing_imports = true
check_untyped_defs = true
disable_error_code = ["misc"]
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = ["fastapi.*", "alembic.*"]
ignore_missing_imports = true


[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules",
    "**/__pycache__",
]
useLibraryCodeForTypes = true
reportMissingTypeStubs = false

[dependency-groups]
dev = [
    "aiosqlite>=0.21.0",
    "httpx>=0.28.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
]

[tool.ty.rules]
# Only ignore unresolved imports due to environment issues
unresolved-import = "ignore"

# Enable strict type checking for better code quality
invalid-assignment = "error"
invalid-argument-type = "error"
call-non-callable = "error"
conflicting-declarations = "error"
duplicate-base = "error"
invalid-return-type = "error"

# Naming conventions: enforce snake_case in Python code
[tool.ruff.lint.pep8-naming]
# Allow camelCase in Pydantic model instantiation (for aliases)
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[tool.ty.src]
root = "src"
